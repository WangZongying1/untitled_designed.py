# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmapCache, QIcon
from PyQt5.QtWidgets import QFileDialog, QApplication, QMenu, QAction
from PIL import Image
from slide_viewer_47.common.slide_view_params import SlideViewParams
from slide_viewer_47.widgets.slide_viewer_main_window import SlideViewerMainWindow

import cv2, sys

import numpy as np

#
# def excepthook(excType, excValue, tracebackobj):
#     print(excType, excValue, tracebackobj)
# sys.excepthook = excepthook


# class Compress_img:
#
#     def __init__(self, img_path):
#         self.img_path = img_path
#         self.img_name = img_path.split('/')[-1]

# def compress_img_CV(self, compress_rate=0.5, show=False):
#     img = cv2.imread(self.img_path)
#     heigh, width = img.shape[:2]
#     # 双三次插值
#     img_resize = cv2.resize(img, (int(heigh ** compress_rate), int(width ** compress_rate)), )
#     cv2.imwrite(self.img_name, img_resize)
#     print("%s 已压缩，" % (self.img_name), "压缩率：", compress_rate)
# if show:
#     cv2.imshow(self.img_name, img_resize)
#     cv2.waitKey(0)


def image_compress(filename, savename, targetsize):
    """图像压缩

    :param filename: 原图路径
    :param savename: 保存图片路径
    :param targetsize: 目标大小，单位为byte
    """
    image = Image.open(filename)
    size = os.path.getsize(filename)
    width, height = image.size
    if size <= targetsize:
        image.resize((width, height)).save(savename)
    num = (targetsize / size) ** 0.5
    width, height = round(width * num), round(height * num)
    image.resize((width, height)).save(savename)


class Ui_MainWindow(object):
    n = 0

    def __init__(self):
        self.win = SlideViewerMainWindow()
        self.scale = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1036, 945)
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 30, 971, 91))
        font = QtGui.QFont()
        font.setFamily("Adobe Heiti Std")
        font.setPointSize(48)
        font.setUnderline(False)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.pushbutton_choosepic = QtWidgets.QPushButton(self.centralwidget)
        self.pushbutton_choosepic.setGeometry(QtCore.QRect(310, 160, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushbutton_choosepic.setFont(font)
        self.pushbutton_choosepic.setIconSize(QtCore.QSize(30, 30))
        self.pushbutton_choosepic.setObjectName("pushbutton_choosepic")
        self.pushbutton_process = QtWidgets.QPushButton(self.centralwidget)
        self.pushbutton_process.setGeometry(QtCore.QRect(510, 160, 117, 41))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(16)
        self.pushbutton_process.setFont(font)
        self.pushbutton_process.setIconSize(QtCore.QSize(30, 30))
        self.pushbutton_process.setObjectName("pushbutton_process")

        # # 创建菜单
        # self.menu = QMenu()
        # # 创建action并添加到菜单中
        # self.action1 = QAction(QIcon("menu.ico"), "所有轮廓", self.menu)
        # self.action2 = QAction(QIcon("menu.ico"), "细节", self.menu)
        #



        self.pushbutton_save = QtWidgets.QPushButton(self.centralwidget)
        self.pushbutton_save.setGeometry(QtCore.QRect(810, 160, 117, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushbutton_save.setFont(font)
        self.pushbutton_save.setIconSize(QtCore.QSize(30, 30))
        self.pushbutton_save.setObjectName("pushbutton_save")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 210, 1011, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(550, 250, 391, 59))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 250, 541, 59))
        self.label_3.setObjectName("label_3")
        self.label_img = QtWidgets.QLabel(self.centralwidget)
        self.label_img.setEnabled(True)
        self.label_img.setGeometry(QtCore.QRect(60, 320, 441, 511))
        self.label_img.setFocusPolicy(QtCore.Qt.NoFocus)
        self.label_img.setFrameShape(QtWidgets.QFrame.Box)
        self.label_img.setObjectName("label_img")
        self.label_processimg = QtWidgets.QLabel(self.centralwidget)
        self.label_processimg.setEnabled(True)
        self.label_processimg.setGeometry(QtCore.QRect(530, 320, 441, 511))
        self.label_processimg.setFocusPolicy(QtCore.Qt.NoFocus)
        self.label_processimg.setFrameShape(QtWidgets.QFrame.Box)
        self.label_processimg.setObjectName("label_processimg")
        self.label_processimg.setScaledContents(True)
        self.label_imgpath = QtWidgets.QLabel(self.centralwidget)
        self.label_imgpath.setGeometry(QtCore.QRect(160, 130, 421, 31))
        self.label_imgpath.setObjectName("label_imgpath")

        self.pushbutton_slideview = QtWidgets.QPushButton(self.centralwidget)
        self.pushbutton_slideview.setEnabled(True)
        self.pushbutton_slideview.setGeometry(QtCore.QRect(660, 160, 111, 41))
        font = QtGui.QFont()
        # font.setFamily("Agency FB")
        font.setPointSize(16)
        self.pushbutton_slideview.setFont(font)
        self.pushbutton_slideview.setObjectName("pushbutton_slideview")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 950, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushbutton_choosepic.clicked.connect(self.openImg)
        self.pushbutton_save.clicked.connect(self.saveImage)
        self.pushbutton_process.clicked.connect(self.showProcessInLabel)
        self.pushbutton_slideview.clicked.connect(self.slideView)
        # self.action1.triggered.connect(self.showProcessInLabel)
        # self.action2.triggered.connect(lambda: print("点击了 action2"))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow",
                                      "<html><head/><body><p><span style=\" color:#ff5500;\">雕刻图像轮廓处理</span></p></body></html>"))
        self.pushbutton_choosepic.setText(_translate("MainWindow", "选择图片"))
        self.pushbutton_process.setText(_translate("MainWindow", "处理"))
        # self.menu.addActions([self.action1, self.action2])
        #
        # self.pushbutton_process.setMenu(self.menu)


        self.pushbutton_save.setText(_translate("MainWindow", "保存"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt;\">轮廓图</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt;\">原图像</span></p></body></html>"))
        self.label_img.setText(_translate("MainWindow", "待载入图片..."))
        self.label_processimg.setText(_translate("MainWindow", "待处理图片..."))
        self.label_imgpath.setText(_translate("MainWindow", "未选择图片..."))
        self.pushbutton_slideview.setText(_translate("MainWindow", "优化"))

    def openImg(self):
        global imgName
        imgName, imgType = QFileDialog.getOpenFileName(self.centralwidget, "打开图片", "",
                                                       "*.jpg;;*.png;;All Files(*)")  # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        jpg = QtGui.QPixmap(imgName).scaled(self.label_img.width(),
                                            self.label_img.height())  # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
        self.label_img.setPixmap(jpg)  # 在label控件上显示选择的图片
        self.label_imgpath.setText(imgName)  # 显示所选图片的本地路径
        self.win.slide_viewer.delete_L()
        self.win.slide_viewer.scene.clear()

    def saveImage(self):  # 保存图片到本地
        fd, type = QFileDialog.getSaveFileName(self.centralwidget, "选择保存路径", "", "*.jpg;;*.png;;All Files(*)")
        img = cv2.imread(r'../temp.jpg')
        cv2.imwrite(fd, img)
        print('图片已经保存到路径：', fd)

    def multiply(self, input, scale):
        input = np.array(input)  # list->numpy.ndarray
        input = input * scale
        return list(input)

    def transform(self):
        #   读取imglabel的图片并做轮廓提取，返回提取后的图像
        path = self.label_imgpath.text()
        img = cv2.imread(path)
        img_gray2 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        ret, thresh2 = cv2.threshold(img_gray2, 150, 255, cv2.THRESH_BINARY)
        contours4, hierarchy4 = cv2.findContours(thresh2, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE)
        print('contours4:', contours4, type(contours4))
        print('================================================================')
        print('hierarchy:', hierarchy4, type(hierarchy4))
        print('所有轮廓的个数：', len(contours4))  # 输出轮廓个数

        image_copy4 = img.copy()
        #   新建全白图
        image_copy4.fill(255)

        def selected_L(contours, pts):
            i = 0
            for p in pts:
                tp = tuple(p)
                i = i + 1
                # print(tp,end= 
                n = 0
                for cnt in contours:
                    pt_Ret_True = cv2.pointPolygonTest(cnt, tp, True)
                    flag = 0
                    if abs(pt_Ret_True) > 50:  # 判断如果点不在轮廓内则索引加1
                        n = n + 1
                    else:
                        flag = 1
                    if flag:
                        print(tp)
                        print('已经通过第', i, '点选择轮廓', n)
                        cv2.drawContours(image_copy4, contours, n, (0, 0, 0), 2, cv2.LINE_AA)
                        break

        if not self.win.slide_viewer.L_x:
            for i in range(len(contours4)):
                if hierarchy4[0, i, 3] <= 0:
                    # print(i)
                    cv2.drawContours(image_copy4, contours4, i, (255, 0, 0), 2, cv2.LINE_AA)  # 蓝色
                else:
                    cv2.drawContours(image_copy4, contours4, i, (0, 0, 255), 2, cv2.LINE_AA)  # 红色
                    ''' hierarchy[i][0]	位于相同的层次级别的下一个轮廓的索引，当其为负值时，表示没有下一轮廓
                        hierarchy[i][1]	位于相同的层次级别的前一个轮廓的索引，当其为负值时，表示没没有前一轮廓
                        hierarchy[i][2]	第一个孩子轮廓的索引，当其为负值时，表示没有父轮廓
                        hierarchy[i][3]	父轮廓的索引，当其为负值时，表示没有下一轮廓'''
        else:
            # for item in self.win.slide_viewer.L:
            #     print(item)

            # print("L_x:", self.win.slide_viewer.L_x)
            # print(self.scale)
            resize_output_x = self.multiply(self.win.slide_viewer.L_x, self.scale)
            resize_output_y = self.multiply(self.win.slide_viewer.L_y, self.scale)
            list_x = resize_output_x
            list_y = resize_output_y
            # print(list_x)
            point_list = []
            for i in range(len(list_x)):
                items = (list_x[i], list_y[i])
                point_list.append(items)
            print(point_list)
            selected_L(contours4, point_list)
            cv2.imwrite(r'../temp.jpg', image_copy4)  # 选取好轮廓后，将该图片保存到temp.jpg中，以便保存

            # self.win.slide_viewer.delete_L()

        return image_copy4

    def showProcessInLabel(self):
        img = self.transform()
        cv2.imwrite(r'../temp.jpg', img)
        img_show = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        _image = QtGui.QImage(img_show[:], img_show.shape[1], img_show.shape[0], img_show.shape[1] * 3,
                              QtGui.QImage.Format_RGB888)
        jpg_out = QtGui.QPixmap(_image)

        self.label_processimg.setPixmap(jpg_out)

    def slideView(self):
        cache_size_in_kb = 700 * 10 ** 3
        QPixmapCache.setCacheLimit(cache_size_in_kb)
        slide_path = r'../temp.jpg'
        slide_path_resize = r'../temp_resize.jpg'
        img = cv2.imread(slide_path)
        heigh, width = img.shape[:2]
        print(heigh, width)
        targetsize = 1024 * 100
        image_compress(slide_path, slide_path_resize, targetsize)
        print('图片已经压缩')
        img_resize = cv2.imread(slide_path_resize)
        heigh1, width1 = img_resize.shape[:2]
        self.scale = (heigh / heigh1 + width / width1) / 2
        print(heigh1, width1)
        print('压缩系数：', self.scale)
        self.win.show()
        self.win.slide_viewer.delete_L()
        self.win.slide_viewer.scene.clear()
        slide_view_params = SlideViewParams(slide_path_resize)
        self.win.slide_viewer.load(slide_view_params)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    formObj = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(formObj)
    formObj.show()

    sys.exit(app.exec_())
